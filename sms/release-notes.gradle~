buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-httpclient:commons-httpclient:3.1'
    }
}

task generateReleaseNotes {
    description = 'Generate release notes'
    group = "Smartsteps"
    inputs.property("alwaysExecute", UUID.randomUUID())

    doFirst {
        File result = new File(buildDir as File, "release-notes.txt")
        File source = file('release-notes.txt')

        int lastRelease = lookupCurrentReleasedBuild()
        def pattern = ~/\d+\s+/

        result.withPrintWriter { PrintWriter out ->
            source.eachLine { String line ->
                int version = line.find(pattern) as int
                String restOfLine = line - pattern

                if (version > lastRelease) {
                    out.println(restOfLine)
                }
            }
        }
    }
}

import org.apache.commons.httpclient.*
import org.apache.commons.httpclient.auth.*
import org.apache.commons.httpclient.methods.*

int lookupCurrentReleasedBuild() {
    def client = new HttpClient()
    client.state.setCredentials(
            new AuthScope('jenkins.telefonicadev.com', 8080, "realm"),
            new UsernamePasswordCredentials('api', 'a53678a4f0c73738a6cc6196fe771e8c')
    )

    // Jenkins does not do any authentication negotiation,
    // ie. it does not return a 401 (Unauthorized)
    // but immediately a 403 (Forbidden)
    client.params.authenticationPreemptive = true

    def get = new GetMethod('http://jenkins.telefonicadev.com:8080/jenkins/job/SmartSteps CI/api/xml'.replace(' ', '%20'))
    NameValuePair[] params = [
            new NameValuePair('xpath','*/build[action/level="GA release"][1]'),
            new NameValuePair('depth', '1')
    ]
    get.setQueryString(params)

    int result = client.executeMethod(get)
    assert result == 200

    def xml = new XmlParser().parse(get.responseBodyAsStream)
    xml.number[0].text() as int
}